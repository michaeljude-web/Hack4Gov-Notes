<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Character Type Detector</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
  <div class="container py-4 py-md-5">
    <div class="row justify-content-center">
      <div class="col-12 col-xl-10">
        <h1 class="h3 fw-bold mb-4">Character Type Detector</h1>
        
        <div class="card shadow-sm border-0">
          <div class="card-body p-4">
            <label class="form-label small text-muted">Paste text (hashes, tokens, or any string) below:</label>
            <textarea 
              id="input" 
              class="form-control font-monospace"
              rows="5"
              placeholder="Paste here... (try: i1lL O0)"
            ></textarea>

            <div class="d-flex flex-wrap gap-2 mt-3">
              <button id="analyze" class="btn btn-primary">
                Analyze
              </button>
              <button id="clear" class="btn btn-outline-secondary">
                Clear
              </button>
              <button id="copyInput" class="btn btn-outline-secondary">
                Copy Input
              </button>
              <div class="form-check d-flex align-items-center ms-2">
                <input type="checkbox" id="showLabels" checked class="form-check-input me-2" />
                <label class="form-check-label small text-muted" for="showLabels">Show labels</label>
              </div>
              <div class="form-check d-flex align-items-center">
                <input type="checkbox" id="collapseSpaces" checked class="form-check-input me-2" />
                <label class="form-check-label small text-muted" for="collapseSpaces">Hide spaces</label>
              </div>
            </div>

            <div id="stats" class="mt-3 small text-muted"></div>

            <div id="grid" class="d-flex flex-wrap gap-2 mt-4" aria-live="polite"></div>

            <div class="mt-4 d-flex flex-wrap gap-2 align-items-center border-top pt-3">
              <button id="exportCSV" class="btn btn-sm btn-outline-secondary">
                Export CSV
              </button>
              <button id="exportText" class="btn btn-sm btn-outline-secondary">
                Export mapping
              </button>
              <span class="text-muted small">Tip: click any character to copy that character + info.</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
  <script>
    const input = document.getElementById('input');
    const analyze = document.getElementById('analyze');
    const clear = document.getElementById('clear');
    const grid = document.getElementById('grid');
    const stats = document.getElementById('stats');
    const copyInput = document.getElementById('copyInput');
    const showLabels = document.getElementById('showLabels');
    const collapseSpaces = document.getElementById('collapseSpaces');
    const exportCSV = document.getElementById('exportCSV');
    const exportText = document.getElementById('exportText');

    function typeOfChar(ch){
      if (ch >= '0' && ch <= '9') return 'number';
      if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) return 'letter';
      return 'other';
    }

    function ambiguousLabel(ch){
      const map = {
        '1':'digit one', 'l':'lower L', 'L':'upper L', 'i':'lower i', 'I':'upper I',
        '0':'digit zero', 'O':'upper O', 'o':'lower o'
      };
      return map.hasOwnProperty(ch) ? map[ch] : null;
    }

    function classForChar(ch){
      const t = typeOfChar(ch);
      if (t === 'number') return 'bg-warning-subtle text-warning-emphasis border-warning';
      if (t === 'letter'){
        const isUpper = ch === ch.toUpperCase();
        return isUpper ? 'bg-primary-subtle text-primary-emphasis border-primary fw-bold' : 'bg-info-subtle text-info-emphasis border-info fst-italic';
      }
      return 'bg-danger-subtle text-danger-emphasis border-danger';
    }

    function analyzeText(){
      const txt = input.value || '';
      grid.innerHTML = '';
      if (!txt) { stats.textContent = 'No text provided.'; return }
      const arr = Array.from(txt);
      let counts = {letter:0, number:0, other:0};
      
      arr.forEach((ch,i)=>{
        if (ch === ' ' && collapseSpaces.checked) return;
        const t = typeOfChar(ch);
        counts[t]++;

        const classes = classForChar(ch);
        const isAmbiguous = ambiguousLabel(ch);
        
        const span = document.createElement('div');
        span.className = `d-inline-flex flex-column align-items-center justify-content-center border rounded p-2 ${classes}`;
        span.style.minWidth = '38px';
        span.style.minHeight = '48px';
        span.style.cursor = 'pointer';
        span.style.transition = 'all 0.2s';
        if(isAmbiguous) span.style.boxShadow = '0 0 0 2px rgba(255, 165, 0, 0.3)';
        
        span.dataset.index = i;
        span.dataset.type = t;
        span.dataset.code = ch.charCodeAt(0);
        span.dataset.char = ch;

        span.addEventListener('mouseenter', ()=>{
          span.style.transform = 'translateY(-4px) scale(1.05)';
          span.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
        });
        span.addEventListener('mouseleave', ()=>{
          span.style.transform = '';
          span.style.boxShadow = isAmbiguous ? '0 0 0 2px rgba(255, 165, 0, 0.3)' : '';
        });

        const labelText = ambiguousLabel(ch);
        if (showLabels.checked && labelText){
          const lbl = document.createElement('div');
          lbl.className = 'small mb-1';
          lbl.style.fontSize = '10px';
          lbl.textContent = labelText;
          span.appendChild(lbl);
        } else if (showLabels.checked && t === 'letter'){
          const caseLabel = (ch === ch.toUpperCase()) ? 'upper' : 'lower';
          const lbl2 = document.createElement('div'); 
          lbl2.className='small mb-1';
          lbl2.style.fontSize = '10px';
          lbl2.textContent = caseLabel; 
          span.appendChild(lbl2);
        }

        const chNode = document.createElement('div');
        chNode.className = 'fs-5 fw-bold font-monospace';
        chNode.textContent = ch === ' ' ? '␣' : ch;
        span.appendChild(chNode);

        span.title = `Index: ${i} | Type: ${t} | Code: ${ch.charCodeAt(0)}${labelText ? ' | '+labelText : ''}`;

        span.addEventListener('click', ()=>{
          const info = `${span.dataset.char}\tindex:${span.dataset.index}\ttype:${span.dataset.type}\tcode:${span.dataset.code}${labelText? '\tlabel:'+labelText : ''}`;
          navigator.clipboard.writeText(info).then(()=>{
            const originalTransform = span.style.transform;
            span.style.transform = 'scale(1.1)';
            setTimeout(()=>span.style.transform = originalTransform, 160);
          }).catch(()=>{});
        });

        grid.appendChild(span);
      });
      
      stats.innerHTML = `<strong>Length:</strong> ${arr.length} &nbsp; <strong>Letters:</strong> ${counts.letter} &nbsp; <strong>Numbers:</strong> ${counts.number} &nbsp; <strong>Other:</strong> ${counts.other}`;
    }

    analyze.addEventListener('click', analyzeText);
    clear.addEventListener('click', ()=>{ input.value=''; grid.innerHTML=''; stats.textContent=''; });
    copyInput.addEventListener('click', ()=>{ navigator.clipboard.writeText(input.value || '').catch(()=>{}); });

    exportCSV.addEventListener('click', ()=>{
      const txt = input.value || '';
      if (!txt) return alert('No text');
      const rows = ['index,char,code,type,label'];
      Array.from(txt).forEach((ch,i)=>{
        rows.push(`${i},"${ch}",${ch.charCodeAt(0)},${typeOfChar(ch)},"${ambiguousLabel(ch)||''}"`);
      });
      const blob = new Blob([rows.join('\n')],{type:'text/csv'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download='char-mapping.csv'; a.click(); URL.revokeObjectURL(url);
    });

    exportText.addEventListener('click', ()=>{
      const txt = input.value || '';
      if (!txt) return alert('No text');
      const lines = [];
      Array.from(txt).forEach((ch,i)=>{
        lines.push(`${i}: '${ch === ' ' ? 'SPACE' : ch}' (code ${ch.charCodeAt(0)}) -> ${typeOfChar(ch)}${ambiguousLabel(ch)? ' -> '+ambiguousLabel(ch): ''}`);
      });
      const blob = new Blob([lines.join('\n')],{type:'text/plain'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download='char-mapping.txt'; a.click(); URL.revokeObjectURL(url);
    });

    input.addEventListener('paste', ()=> setTimeout(analyzeText,50));
    input.addEventListener('keydown', (e)=>{ if(e.key === 'Enter' && (e.ctrlKey||e.metaKey)) analyzeText(); });

    input.value = 'i1lL O0 oI';
    analyzeText();
  </script>
</body>
</html>
